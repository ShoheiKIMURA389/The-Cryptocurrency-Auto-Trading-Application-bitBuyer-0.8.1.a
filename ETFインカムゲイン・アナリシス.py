# このプログラムについて
# このプログラムは、JEPI、HNDL、QYLD、XYLD などの毎月配当型 ETF（Exchange-Traded Fund）のインカムゲインシミュレーションを行うためのツールです。
# ユーザーが設定した初期値に基づき、ETF の利回り、株価成長率、税率、配当再投資率などを考慮して、保有株数、年間配当金、買付株数、総投資額、ETF 株価の変化を月次毎
# にシミュレートし、年次データに変換します。NISA 口座の使用の有無や住民税免除、米国株への投資など、各種条件をカスタマイズ可能です。NISA 枠を超えた場合は、超えた
# 部分に対して自動で課税計算を行います。

# 主な特徴
# 1. 柔軟な設定項目:
#    - ETF 年間利回り、年間株価成長率、初期株数、月次増資額、配当金再投資割合などを自由に設定可能。
# 2. 税率計算:
#    - 国内税率、住民税率、米国源泉徴収税率を考慮し、NISA 枠の適用も自動で計算。
# 3. 視覚的なデータ表示:
#    - PyQt5 を使用してシミュレーション結果を表形式でウィンドウに表示。
# 4. 直感的なカスタマイズ:
#    - プログラム内のグローバル変数を編集することで、シミュレーション条件を簡単に変更可能。

# 注意事項
# - 本プログラムは教育目的及び参考用に提供されています。実際の投資判断には充分な調査と専門家への相談を行ってください。
# - 税率や投資条件は 2025 年時点の日本の制度を基にしています。将来の変更に対応するにはプログラムの修正が必要です。

# 想定される利用ケース
# 1. ETF 投資の長期的なパフォーマンスの予測:
#    - 毎月配当型の特定のETF（例: JEPI、HNDL、QYLD、XYLD）の配当金再投資戦略の効果を確認。
# 2. NISA 枠の最適利用:
#    - NISA 口座を使用した場合と使用しない場合の違いをシミュレーション。
# 3. 税引後リターンの分析:
#    - 税制優遇の影響を含む、実質的なリターンを把握。

# 推奨動作環境
# - OS: macOS または Windows
# - Python バージョン: 3.8 以上
# - 必要ライブラリ: pandas、PyQt5

# VS Code を用いた利用方法
# --- Mac 及び Windows 共通 ---
# 1. 必要なライブラリの確認
# 以下のコマンドをターミナル（Mac）またはコマンドプロンプト（Windows）で実行し、ライブラリがインストールされているか確認してください。
# ```
# pip list | grep pandas または pip3 list | grep pandas
# pip list | grep PyQt5 または pip3 list | grep PyQt5
# ```
# 上記のコマンドで "pandas" と "PyQt5" が表示されない場合、以下のインストール手順を実行してください。

# 2. 必要なライブラリのインストール
# 以下のコマンドを使用してインストールを行います。
# ```
# pip install pandas PyQt5 または pip3 install pandas PyQt5
# ```

# 3. VS Code の設定
# - VS Code でこのスクリプトファイルを開きます。
# - Python 拡張機能がインストールされていることを確認してください。
# - このスクリプトを実行するには、VS Code ウィンドウ右上の再生ボタンをクリックします。

# 4. 実行結果
# シミュレーション結果がウィンドウに表示されます。
# ウィンドウは閉じるまで保持されますので、必要に応じて確認してください。

import pandas as pd
from PyQt5.QtWidgets import QApplication, QTableWidget, QTableWidgetItem, QVBoxLayout, QWidget
from PyQt5.QtCore import Qt

# グローバル変数の定義
ETF年間利回り = 7.22  # 年間利回り（百分率％）
年間株価成長率 = 2.0  # 年間株価成長率（百分率％）
ETF単価 = 9100  # 初期 ETF 価格（円）
ETF初期株数 = 2000  # 初期株数
月次増資額 = 34000  # 毎月の増資額（円）
配当金再投資割合 = 100  # 配当金再投資割合（百分率％）
NISA使用 = True  # NISA 利用の有無（利用：True、非利用：False）
住民税免除 = True  # 住民税免除の有無（免除：True、非免除：False）
米国株 = True  # 米国株かどうか（米国株：True、非米国株：False）
年間取引手数料 = 0  # 年間の取引手数料（円）
シミュレーション年数 = 10  # シミュレーション年数

# 定数
国内税率 = 15.315  # 国内所得税率（百分率％）
住民税率 = 5.0  # 住民税率（百分率％）
米国源泉徴収税率 = 10.0  # 米国源泉徴収税率（百分率％）
NISA上限 = 18_000_000  # NISA の成長投資枠上限（円）

# 月次利回りと株価成長率への変換（年間利回りや株価成長率を月次ベースに換算）
月次利回り = (1 + ETF年間利回り / 100) ** (1 / 12) - 1
月次株価成長率 = (1 + 年間株価成長率 / 100) ** (1 / 12) - 1

# 税率の計算関数
def 税率を計算する():
    """
    国内税率、住民税率、米国源泉徴収税率を考慮して、最終的な税率を計算する。
    """
    税率 = 国内税率
    if not 住民税免除:
        税率 += 住民税率  # 住民税を加算
    if 米国株:
        税率 -= 米国源泉徴収税率  # 外国税額控除を適用
    return round(税率, 5)  # 小数点以下第六位を繰り上げ

# シミュレーション関数
def シミュレーションを実行する():
    """
    ETF の運用シミュレーションを実行し、保有株数、年間配当金、買付株数、総投資額、ETF 株価を計算する。

    各月の処理:
    - 税引後配当金を計算し、再投資可能金額に追加。
    - 再投資可能金額を用いて買付株数を計算。
    - 再投資後に余った金額を翌月に繰り越し。

    年次の処理:
    - 年次毎に配当金や買付株数を累積し、年次データを記録。
    - 年次の境界では繰り越し金額をリセットしないため、月次繰越金額はそのまま次年に持ち越される。

    特記事項:
    - 株価成長は月次イテレーションの最後で行い、初期単価未満にならないように保証。
    - 再投資可能金額の計算で月次増資額や配当金再投資割合が反映される。
    """
    税率 = 税率を計算する() / 100
    保有株数 = ETF初期株数
    現在のETF単価 = ETF単価
    総投資額 = 保有株数 * 現在のETF単価  # 初期の総投資額
    繰越金額 = 0  # 月次繰越金額

    # 結果を格納するリスト
    結果 = []

    for 年次 in range(1, シミュレーション年数 + 1):
        年間配当金 = 0  # その年の配当金合計
        年間買付株数 = 0  # その年の累積買付株数

        for 月 in range(1, 13):  # 月次イテレーション
            月次配当金 = round(保有株数 * 現在のETF単価 * 月次利回り, 2)

            # NISA 非課税部分と課税対象部分を分けて計算
            非課税割合 = min(1, NISA上限 / 総投資額) if 総投資額 > 0 and NISA使用 else 0
            課税割合 = 1 - 非課税割合

            非課税配当 = 月次配当金 * 非課税割合
            課税配当 = 月次配当金 * 課税割合

            # 税引後の配当金を計算
            税引後配当金 = 非課税配当 + (課税配当 * (1 - 税率))
            税引後配当金 = round(税引後配当金, 2)

            # 再投資可能額を計算
            再投資額 = 税引後配当金 * (配当金再投資割合 / 100) if 配当金再投資割合 > 0 else 0
            再投資可能金額 = 繰越金額 + 月次増資額 + 再投資額 - (年間取引手数料 / 12 if 年間取引手数料 > 0 else 0)

            # 買付株数を計算（再投資可能金額が 0 以下の場合は買付なし）
            if 再投資可能金額 > 0:
                買付株数 = 再投資可能金額 // 現在のETF単価
                繰越金額 = 再投資可能金額 % 現在のETF単価
            else:
                買付株数 = 0
                繰越金額 = 再投資可能金額

            買付株数 = int(買付株数)  # 小数点以下切り捨て

            # 保有株数と投資額を更新
            保有株数 += 買付株数
            総投資額 += 再投資額  # 再投資額を総投資額に加算

            # 月次買付株数を年間累積に加算
            年間買付株数 += 買付株数

            # 月次配当金を年間配当金に加算
            年間配当金 += 税引後配当金

            # 現在の ETF 単価が初期値以上であることを保証
            if 現在のETF単価 < ETF単価:
                現在のETF単価 = ETF単価

            # 株価成長を適用
            現在のETF単価 *= (1 + 月次株価成長率)
            現在のETF単価 = round(現在のETF単価, 2)  # 小数点以下第二位まで保持

        # 年次データを保存
        結果.append({
            "年次": 年次,
            "保有株数": f"{int(保有株数):,}",
            "年間配当金（円）": f"{int(年間配当金):,}",
            "買付株数": f"{int(年間買付株数):,}",
            "総投資額（円）": f"{int(総投資額):,}",
            "ETF株価（円）": f"{int(現在のETF単価):,}",
        })

    # データフレームに変換して返す
    return pd.DataFrame(結果)

# データフレームをウィンドウで表示する関数
def 表を表示する(dataframe):
    """
    PyQt5 を使用してデータフレームをテーブル形式でウィンドウに表示する。
    """
    app = QApplication([])
    window = QWidget()
    window.setWindowTitle("シミュレーション結果")
    layout = QVBoxLayout()

    table = QTableWidget()
    table.setRowCount(len(dataframe))
    table.setColumnCount(len(dataframe.columns))
    table.setHorizontalHeaderLabels(dataframe.columns)

    # データフレームの内容をテーブルに追加
    for row_idx, row in dataframe.iterrows():
        for col_idx, value in enumerate(row):
            table.setItem(row_idx, col_idx, QTableWidgetItem(str(value)))

    layout.addWidget(table)
    window.setLayout(layout)

    # ウィンドウサイズを設定
    screen = QApplication.primaryScreen().availableGeometry()
    width = int(screen.width() * 0.5)  # 横幅を 50% に設定
    height = int(screen.height() * 0.8)  # 縦幅を 80% に設定
    window.resize(width, height)
    window.move((screen.width() - width) // 2, (screen.height() - height) // 2)

    window.show()
    app.exec_()

# メイン処理
def メイン():
    """
    シミュレーションを実行し、結果を表示する。
    """
    シミュレーション結果 = シミュレーションを実行する()
    表を表示する(シミュレーション結果)

# プログラム実行
if __name__ == "__main__":
    メイン()
